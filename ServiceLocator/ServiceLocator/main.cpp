/************************************************************************/
/* 服务定位模式:服务类定义一组操作的抽象接口。具体的服务提供者实现此接口。单独的服务定位器提供对服务的访问，方法是在隐藏提供者的具体类型和用于定位它的流程的同时，找到合适的提供者。

	这里需要注意的关键部分是，调用playSound()的代码并不知道具体的ConsoleAudio类; 它只知道抽象的音频接口。
	同样重要的是，locator类也没有耦合到具体的服务提供者。代码中惟一知道实际具体类的地方是提供服务的初始化代码。
	这里还有一个层次的解耦 : 音频接口没有意识到在大多数地方都是通过服务定位器访问它的。
	据它所知，它只是一个常规的抽象基类。这很有用，因为这意味着我们可以将此模式应用于不一定围绕它设计的现有类。
	这与Singleton相反，Singleton影响“服务”类本身的设计。
*/
/************************************************************************/


#include "locator.h"

int main()
{
	Locator::initialize();
	ConsoleAudio* consoleAudio = new ConsoleAudio();
	Locator::provide(consoleAudio);
	Locator::getAudio().playSound(1);

	return 0;
}